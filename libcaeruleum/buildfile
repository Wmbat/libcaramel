intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import impl_libs += libhello%lib{hello}

./: lib{caeruleum}: libul{caeruleum}: {hxx ixx txx cxx}{** -**.test... -version} \
  hxx{version} $impl_libs $intf_libs

# Unit tests.
#
exe{*.test}:
{
  test = true
  install = false
}

for t: cxx{**.test...}
{
  d = $directory($t)
  n = $name($t)...

  ./: $d/exe{$n}: $t $d/{hxx ixx txx}{+$n} $d/testscript{+$n}
  $d/exe{$n}: libul{caeruleum}: bin.whole = false
}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

obja{*}: cxx.poptions += -DLIBCAERULEUM_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBCAERULEUM_SHARED_BUILD

# Export options.
#
lib{caeruleum}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{caeruleum}: cxx.export.poptions += -DLIBCAERULEUM_STATIC
libs{caeruleum}: cxx.export.poptions += -DLIBCAERULEUM_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{caeruleum}: bin.lib.version = @"-$version.project_id"
else
  lib{caeruleum}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the libcaeruleum/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/libcaeruleum/
  install.subdirs = true
}
